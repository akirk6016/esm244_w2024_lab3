---
title: "244_lab_3 part 1: working with spatial data"
format:
 html:
    code_fold: true
    toc: true
    number-sections: true
    embed-resources: true 
execute: 
  echo: true 
  message: false 
  warning: false 
editor: visual
---

# Lab 2 - Jan 25 


```{r libraries}
library(tidyverse)
library(here)
library(broom)

# Spatial data packages
library(sf)
library(tmap)

```

### read in our data
```{r read in data}
ca_county_raw_sf <- read_sf(here('data', 'ca_counties', 'CA_Counties_TIGER2016.shp' ))

ca_counties_sf <- ca_county_raw_sf %>% 
  janitor::clean_names() %>% 
  mutate(land_km2 = aland / 1e6) %>% 
  select(county = name, land_km2)

## automatically keeps geometry column 

ca_counties_df <- ca_counties_sf %>% 
  as.data.frame() %>% 
  select(-geometry)
```

.shp is verticies/outlines/polygons of our data (usually a bigger file)
.dbf info that goes along with the polygons of .shp
.prj tells us info we might be missing 
.shx ?

geometry column gives us all the boundary information 


## Check the CRS

```{r}
ca_counties_sf %>% st_crs()

## ID["EPSG",3857]] unique code that tells us what we need to knoe about our data/code (at the very end of this output)

ca_counties_sf %>% terra::crs()

## gives us the same as above
```


## explore it visually 

```{r base plot}
plot(ca_counties_sf %>% select(land_km2))
# in base plot, it's better to just grab one variable and plot that 
```

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf, aes(fill = land_km2), color = 'white', size = 0.1) +
  theme_void() +
  scale_fill_gradientn(colors = c('cyan', 'blue', 'purple'))
```


## read in some sesbania records

```{r}
sesbania_sf <- read_sf(here('data/red_sesbania/ds80_for_lab.gpkg')) %>% janitor::clean_names()

sesbania_sf %>% st_crs()

## this is in a different coordiante reference system than out last set

##gpkg is a geopackage that bundles all the other spatial data files so we dont have to worry about tracking all of them, and is a smaller overall data file 

plot(sesbania_sf %>% select(id))
```

## analysis

let's find the count of red sesbania observed in this dataset, by county, and then create a map of all the CA counties using the fill colors to indicate sesbania counts 

### pseudocode 

first thing I would want to do is find a way to merge the datasets, and then align the coordiate systems? and count based on presence within the boundary?

### Transform the CRS so records match counties

```{r}
sesbania_3857_sf <- st_transform(sesbania_sf, 3857) ## if we know the CRS code

sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf)) ## if dont know the CRS code we want to convert it to 

## really need that .prj to know about our crs in order to transform it
```


### let's plot the two together

```{r}
ggplot() + 
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = 'red')
```

## Spatial Join 

```{r}
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf)

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf)

## whatever comes first is what it keeps in the geometry column and then tacks on the other 
```


## Summarize by County

Choropleth
fancy name for a map
```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county) %>% 
  summarize(n_records = sum(!is.na(id)))

ggplot() +
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = 'grey90', size =1) +
  scale_fill_gradientn(colors = c('lightgrey', 'orange', 'purple')) +
  theme_minimal() +
  labs(fill = 'Number of S. punicea records')
  
  
```

## next analysis 

for the county with the greatest number of red sesbania records, make a map of those locations and where they occur within the county. 

### pseudocode

i would use the other join and then group by county and then select only the county with the highest count 


```{r}
county_max <- sesb_counts_sf %>% 
  filter(n_records == max(n_records)) %>% 
  pull(county)

solano_sesb_sf <- sesb_ca_sf %>% 
  filter(county == county_max)

solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = 'red')
```


# Making an interactive map with 'tmap'

```{r}
#| eval: false 
#| include: true 

### set the viewing mode to interactive 
tmap_mode(mode = 'view')

tm_shape(ca_counties_sf) + 
  tm_fill("land_km2", palette = "BuGn") + 
  tm_shape(sesbania_sf) +
  tm_dots()

```

